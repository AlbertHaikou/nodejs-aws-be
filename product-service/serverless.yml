service: product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: SNSTopic
  environment:
    PG_PORT: 5432
    PG_DATABASE: lesson4
    PG_USERNAME: postgres
    AWS_SQS_NAME: 'node-aws-sqs-queue'
    AWS_SNS_TOPIC: 'node-aws-product-topic'
    AWS_SNS_ARN:
      Ref: 'SNSTopic'

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: nodejs-aws-sqs-queue
        ReceiveMessageWaitTimeSeconds: 20
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: nodejs-aws-sns-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: gaolbertas@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true

functions:
  getAllProducts:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors:
            headers: "*"

  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{id}
          method: get
          cors:
            headers: "*"
          request:
            parameters:
              paths:
                id: true
  addProduct:
    handler: handler.addProduct
    events:
      - http:
          path: products
          method: post
          cors:
            headers: "*"
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn